#!/bin/sh

CLANG_VER=3.2
SRCDIR=$(cd "$(dirname "$0")" && pwd)

usage() {
    cat <<EOF
Usage: $0 [options]

Configures SourceWeb and runs qmake to generate makefiles.

Installation directories:
  --prefix=PREFIX         Base path for build/install.  Default: /usr/local

Dependency options:
  --with-clang-dir=CLANG_DIR
                          Root of Clang $CLANG_VER installation.  This path
                          should identify a Clang installation directory
                          containing bin, lib, and include directories.  It
                          should not refer to a Clang build directory.
  --with-qmake=QMAKE [optional]
                          Configure the qmake binary to use.  By default,
                          the configure script searches the PATH for qmake.
EOF
}

QMAKE=
while [ $# -gt 0 ]; do
    ARG=$1
    case $ARG in
        --prefix|--with-clang-dir|--with-qmake)
            shift
            ARG=$ARG=$1
    esac
    case $ARG in
        --prefix=*) PREFIX=${ARG#*=}; shift;;
        --with-clang-dir=*) CLANG_DIR=${ARG#*=}; shift;;
        --with-qmake=*) QMAKE=${ARG#*=}; shift;;
        -h|--help) usage; exit 0;;
        *) echo "$0: error: Unrecognized argument $ARG"; exit 1;;
    esac
done

PREFIX=${PREFIX:-/usr/local}

if [ "$CLANG_DIR" = "" ]; then
    echo "$0: error: A Clang $CLANG_VER directory must be specified using --with-clang-dir."
    exit 1
fi
if [ "${CLANG_DIR#/}" = "$CLANG_DIR" ]; then
    echo "$0: error: --with-clang-dir path must be absolute."
    exit 1
fi
if [ "${PREFIX#/}" = "$PREFIX" ]; then
    echo "$0: error: --prefix path must be absolute."
    exit 1
fi
if [ -n "$QMAKE" -a \( ! -f "$QMAKE" -o ! -x "$QMAKE" \) ]; then
    echo "$0: error: $QMAKE does not exist or is not an executable file."
    exit 1
fi


################################################################################
# Find qmake.

if [ -z "$QMAKE" ]; then
    echo "Looking for qmake..."
    echo "- which qmake-qt4"
    which qmake-qt4 > /dev/null
    if [ $? -eq 0 ]; then
        QMAKE=$(which qmake-qt4)
        echo "- found $QMAKE"
    else
        echo "- found nothing"
        echo "- which qmake"
        which qmake > /dev/null
        if [ $? -eq 0 ]; then
            QMAKE=$(which qmake)
            echo "- found $QMAKE"
        else
            echo "- found nothing"
            echo "- error: Could not find qmake"
            exit 1
        fi
    fi
else
    echo "Using configured qmake... $QMAKE"
fi

QMAKE_FLAGS=""


################################################################################
# On Linux, build the project using the same Clang compiler used to index code.
# Many current Linux distributions lack a C++11 toolchain, so reusing the
# indexing compiler is convenient.

if [ "$(uname)" = "Linux" ]; then
    # Ideally, we would also change the spec file to unsupported/linux-clang
    # on Linux, but that spec file does not exist in Qt 4.6, which many current
    # distributions still use.
    QMAKE_FLAGS="$QMAKE_FLAGS QMAKE_CC=$CLANG_DIR/bin/clang"
    QMAKE_FLAGS="$QMAKE_FLAGS QMAKE_CXX=$CLANG_DIR/bin/clang++"
    QMAKE_FLAGS="$QMAKE_FLAGS QMAKE_LINK=$CLANG_DIR/bin/clang++"
fi


################################################################################
# The default mkspec for Qt4 qmake on OS X generates an Xcode project file.
# The default for Qt5 generates a Makefile, but it uses libstdc++ and sets the
# deployment target to 10.6.  Select an appropriate spec file unless the user
# overrides it using QMAKESPEC.

if [ "$(uname)" = "Darwin" -a "$QMAKESPEC" = "" ]; then
    echo "The default qmake spec is not suitable.  Overriding it."
    if "$QMAKE" -v 2>&1 | grep '^Using Qt version 4\.' > /dev/null; then
        # enable-cxx11.pri will configure libc++ and the deployment target.
        QMAKE_FLAGS="$QMAKE_FLAGS -spec unsupported/macx-clang"
    else
        # Assume qmake is from Qt5, which has a spec selecting Clang and
        # libc++, which is needed for C++11 support.
        QMAKE_FLAGS="$QMAKE_FLAGS -spec macx-clang-libc++"
    fi
fi


################################################################################
# Test C++11 support using qmake.

run_test()
{
    echo "- running: $@"
    "$@" >cxx11-compat-test.log 2>&1
}

# Test that the qmake configuration is working and has sufficient C++11 support.
echo "Testing C++11 support using $QMAKE..."
run_test "$SRCDIR/cxx11-compat-test/run-test.sh" "$QMAKE" $QMAKE_FLAGS
if [ $? -ne 0 ]; then
    echo "- Command failed.  Output of $PWD/cxx11-compat-test.log:"
    while read LINE; do
        echo "    $LINE"
    done < cxx11-compat-test.log
    exit 1
fi
echo "- test passed"


################################################################################
# Invoke qmake.

run_qmake()
{
    echo "running: $@"
    "$@"
}

run_qmake "$QMAKE" -r "$SRCDIR/sourceweb.pro" $QMAKE_FLAGS \
    PREFIX="$PREFIX" CLANG_DIR="$CLANG_DIR"
if [ $? -ne 0 ]; then
    echo qmake failed
    exit 1
fi
