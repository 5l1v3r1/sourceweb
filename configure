#!/bin/sh

CLANG_VER=3.2
SRCDIR=$(cd "$(dirname "$0")" && pwd)

usage() {
    cat <<EOF
Usage: $0 [options]

Configures SourceWeb and runs qmake to generate makefiles.

Installation directories:
  --prefix=PREFIX         Base path for build/install.  Default: /usr/local
  --bindir=BINDIR         Directory for binaries.  Default: PREFIX/bin

Dependency options:
  --with-clang-dir=CLANG_DIR
                          Root of Clang $CLANG_VER installation.  This path
                          should identify a Clang installation directory
                          containing bin, lib, and include directories.  It
                          should not refer to a Clang build directory.
EOF
}

while [ $# -gt 0 ]; do
    ARG=$1
    case $ARG in
        --prefix|--bindir|--with-clang-dir)
            shift
            ARG=$ARG=$1
    esac
    case $ARG in
        --prefix=*) PREFIX=${ARG#*=}; shift;;
        --bindir=*) BINDIR=${ARG#*=}; shift;;
        --with-clang-dir=*) CLANG_DIR=${ARG#*=}; shift;;
        -h|--help) usage; exit 0;;
        *) echo "error: Unrecognized argument $ARG"; exit 1;;
    esac
done

PREFIX=${PREFIX:-/usr/local}
BINDIR=${BINDIR:-$PREFIX/bin}

if [ "$CLANG_DIR" = "" ]; then
    echo "error: A Clang $CLANG_VER directory must be specified using --with-clang-dir."
    exit 1
fi


################################################################################
# Find qmake.

echo "Looking for qmake..."
echo "- which qmake-qt4"
which qmake-qt4 > /dev/null
if [ $? -eq 0 ]; then
    QMAKE=$(which qmake-qt4)
    echo "- found $QMAKE"
else
    echo "- found nothing"
    echo "- which qmake"
    which qmake > /dev/null
    if [ $? -eq 0 ]; then
        QMAKE=$(which qmake)
        echo "- found $QMAKE"
    else
        echo "- found nothing"
        echo "- error: Could not find qmake"
        exit 1
    fi
fi


################################################################################
# By default, qmake on OS X generates an Xcode project file.  We need it to
# generate a Makefile instead, so provide a spec file unless QMAKESPEC is set.

OSX_SPEC_ARG=""
if [ "$QMAKESPEC" = "" ]; then
    case $(uname) in
        Darwin)
            echo "The default qmake spec is not suitable.  Overriding it."
            OSX_SPEC_ARG="-spec unsupported/macx-clang"
            ;;
    esac
fi


################################################################################
# Test C++11 support using qmake.

run_test()
{
    echo "- running: $@"
    "$@" >cxx11-compat-test.log 2>&1
}

# Test that the qmake configuration is working and has sufficient C++11 support.
echo "Testing C++11 support using $QMAKE..."
run_test "$SRCDIR/cxx11-compat-test/run-test.sh" "$QMAKE" $OSX_SPEC_ARG
if [ $? -ne 0 ]; then
    echo "- Command failed.  Output of $PWD/cxx11-compat-test.log:"
    while read LINE; do
        echo "    $LINE"
    done < cxx11-compat-test.log
    exit 1
fi
echo "- test passed"


################################################################################
# Invoke qmake.

run_qmake()
{
    echo "running: $@"
    "$@"
}

run_qmake "$QMAKE" -r "$SRCDIR/sourceweb.pro" $OSX_SPEC_ARG \
    PREFIX="$PREFIX" BINDIR="$BINDIR" CLANG_DIR="$CLANG_DIR"
if [ $? -ne 0 ]; then
    echo qmake failed
    exit 1
fi
